// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: type_worker.sql

package db

import (
	"context"
)

const createTypeWorker = `-- name: CreateTypeWorker :one
INSERT INTO type_worker (id, slug, "name") 
VALUES($1, $2, $3)
RETURNING id, name, slug
`

type CreateTypeWorkerParams struct {
	ID   int32  `json:"id"`
	Slug string `json:"slug"`
	Name string `json:"name"`
}

func (q *Queries) CreateTypeWorker(ctx context.Context, arg CreateTypeWorkerParams) (TypeWorker, error) {
	row := q.db.QueryRowContext(ctx, createTypeWorker, arg.ID, arg.Slug, arg.Name)
	var i TypeWorker
	err := row.Scan(&i.ID, &i.Name, &i.Slug)
	return i, err
}

const getTypeWorkerBySlug = `-- name: GetTypeWorkerBySlug :one
SELECT id, name, slug FROM type_worker
WHERE slug = $1
LIMIT 1
`

func (q *Queries) GetTypeWorkerBySlug(ctx context.Context, slug string) (TypeWorker, error) {
	row := q.db.QueryRowContext(ctx, getTypeWorkerBySlug, slug)
	var i TypeWorker
	err := row.Scan(&i.ID, &i.Name, &i.Slug)
	return i, err
}

const getTypeWorkers = `-- name: GetTypeWorkers :many
SELECT id, name, slug FROM type_worker
`

func (q *Queries) GetTypeWorkers(ctx context.Context) ([]TypeWorker, error) {
	rows, err := q.db.QueryContext(ctx, getTypeWorkers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TypeWorker
	for rows.Next() {
		var i TypeWorker
		if err := rows.Scan(&i.ID, &i.Name, &i.Slug); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
