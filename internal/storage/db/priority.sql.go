// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: priority.sql

package db

import (
	"context"
	"database/sql"
)

const getPriorityBySlug = `-- name: GetPriorityBySlug :one
SELECT id, name, weight, slug FROM priority p
WHERE p.slug = $1
LIMIT 1
`

func (q *Queries) GetPriorityBySlug(ctx context.Context, slug string) (Priority, error) {
	row := q.db.QueryRowContext(ctx, getPriorityBySlug, slug)
	var i Priority
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Weight,
		&i.Slug,
	)
	return i, err
}

const getPriorityBySystemId = `-- name: GetPriorityBySystemId :one
SELECT p.id, p.name, weight, slug, s.id, create_user, id_priority, s.name, description, is_active FROM priority p 
JOIN system s ON s.id_priority = p.id
WHERE s.id = $1
`

type GetPriorityBySystemIdRow struct {
	ID          int32          `json:"id"`
	Name        string         `json:"name"`
	Weight      int32          `json:"weight"`
	Slug        string         `json:"slug"`
	ID_2        int32          `json:"id_2"`
	CreateUser  sql.NullInt32  `json:"create_user"`
	IDPriority  int32          `json:"id_priority"`
	Name_2      string         `json:"name_2"`
	Description sql.NullString `json:"description"`
	IsActive    bool           `json:"is_active"`
}

func (q *Queries) GetPriorityBySystemId(ctx context.Context, id int32) (GetPriorityBySystemIdRow, error) {
	row := q.db.QueryRowContext(ctx, getPriorityBySystemId, id)
	var i GetPriorityBySystemIdRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Weight,
		&i.Slug,
		&i.ID_2,
		&i.CreateUser,
		&i.IDPriority,
		&i.Name_2,
		&i.Description,
		&i.IsActive,
	)
	return i, err
}
